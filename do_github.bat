@echo off
setlocal enabledelayedexpansion
chcp 65001 >nul

rem ================== SETTINGS ==================
set REPO_URL=https://github.com/JOVIANpega/MU310_FW_GUI.git
rem ==============================================

echo ===== Step 0: ensure this is a git repo =====
if not exist .git (
    echo Initializing new git repository...
    git init || goto :fail
)

echo ===== Step 1: set or fix remote origin =====
set CUR_ORIGIN=
for /f "tokens=2" %%A in ('git remote -v ^| findstr /b "origin" ^| findstr "(fetch)"') do set CUR_ORIGIN=%%A
if not defined CUR_ORIGIN (
    echo Adding origin: %REPO_URL%
    git remote add origin %REPO_URL% || goto :fail
) else (
    echo Origin already set to: !CUR_ORIGIN!
)

echo ===== Step 2: ensure branch main exists =====
set CUR_BRANCH=
for /f "tokens=*" %%B in ('git rev-parse --abbrev-ref HEAD 2^>nul') do set CUR_BRANCH=%%B
if /i "!CUR_BRANCH!"=="HEAD" set CUR_BRANCH=
if not defined CUR_BRANCH (
    echo Creating and switching to branch main...
    git checkout -B main || goto :fail
) else (
    if /i not "!CUR_BRANCH!"=="main" (
        echo Switching to branch main...
        git checkout -B main || goto :fail
    )
)

echo ===== Step 3: update .gitignore (safe) =====
if not exist .gitignore (echo # generated by do_github.bat>.gitignore)
findstr /c:"logs/" .gitignore >nul || echo logs/>>.gitignore
findstr /c:"*.log" .gitignore >nul || echo *.log>>.gitignore
findstr /c:"release/" .gitignore >nul || echo release/>>.gitignore
findstr /c:"__pycache__/" .gitignore >nul || echo __pycache__/>>.gitignore
findstr /c:"build/" .gitignore >nul || echo build/>>.gitignore
findstr /c:"*.spec" .gitignore >nul || echo *.spec>>.gitignore
findstr /c:"dist/" .gitignore >nul || echo dist/>>.gitignore
findstr /c:"version_info.txt" .gitignore >nul || echo version_info.txt>>.gitignore
rem Add more ignore rules as you need above
git add .gitignore

echo ===== Step 4: check version info =====
echo Checking version information...
if exist "version.py" (
    for /f "usebackq tokens=2 delims== " %%v in (`findstr /r /c:"^__version__\s*=\s*\".*\"" version.py`) do set VERSION=%%v
    set VERSION=!VERSION: =!
    set VERSION=!VERSION:\"=!
    set VERSION=!VERSION:"=!
    echo Current version: !VERSION!
) else (
    set VERSION=unknown
    echo Warning: version.py not found
)

echo ===== Step 5: stage and commit changes =====
git add -A

rem 檢查是否有變更需要提交
git diff --cached --quiet
if errorlevel 1 (
    rem 有變更，生成描述性提交訊息
    echo Generating commit message...
    set COMMIT_MSG=feat: update MU310 Tools Center v!VERSION!
    set COMMIT_MSG=!COMMIT_MSG! - Add keyword color editor, fix settings layout
    set COMMIT_MSG=!COMMIT_MSG!, improve help.html, update build.bat
    echo Commit message: !COMMIT_MSG!
    git commit -m "!COMMIT_MSG!" || goto :fail
) else (
    echo No changes to commit.
)

echo ===== Step 6: push to origin/main =====
echo Fetching remote updates...
git fetch origin || goto :fail

echo Attempting to push...
git push -u origin main
if errorlevel 1 (
    echo Push was rejected, trying to pull with rebase and retry...
    git pull --rebase origin main || goto :fail
    git push -u origin main || goto :fail
)

echo.
echo Done. Open GitHub to verify the repository was updated.
goto :eof

:fail
echo.
echo Failed. Please review the messages above.
exit /b 1
